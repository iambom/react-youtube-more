[{"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\template\\src\\app.jsx":"1","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\template\\src\\index.js":"2","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\app.jsx":"3","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\VideoList\\VideoList.jsx":"4","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\Search\\Search.jsx":"5","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\index.js":"6","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\service\\youtube.js":"7","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\VideoItem\\VideoItem.jsx":"8","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\SideMenu\\SideMenu.jsx":"9","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\Header\\Header.jsx":"10","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\VideoDetail\\VideoDetail.jsx":"11","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\Comments\\Comments.jsx":"12","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\Main\\Main.jsx":"13","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\Root.js":"14","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\Router.jsx":"15","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\SelectedVideo\\SelectedVideo.jsx":"16","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\SearchVideoList\\SearchVideoList.jsx":"17","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\service\\infiniteScroll.js":"18"},{"size":88,"mtime":1609907941391,"results":"19","hashOfConfig":"20"},{"size":219,"mtime":1609907770829,"results":"21","hashOfConfig":"20"},{"size":5554,"mtime":1625316810297,"results":"22","hashOfConfig":"23"},{"size":1438,"mtime":1619078338912,"results":"24","hashOfConfig":"23"},{"size":963,"mtime":1618923416185,"results":"25","hashOfConfig":"26"},{"size":498,"mtime":1624864083504,"results":"27","hashOfConfig":"23"},{"size":2122,"mtime":1618993289604,"results":"28","hashOfConfig":"26"},{"size":3374,"mtime":1618991742735,"results":"29","hashOfConfig":"26"},{"size":719,"mtime":1618992991117,"results":"30","hashOfConfig":"23"},{"size":1064,"mtime":1617695510665,"results":"31","hashOfConfig":"23"},{"size":4676,"mtime":1624864443475,"results":"32","hashOfConfig":"23"},{"size":3739,"mtime":1624864359352,"results":"33","hashOfConfig":"23"},{"size":1692,"mtime":1619080121323,"results":"34","hashOfConfig":"23"},{"size":239,"mtime":1618826347754,"results":"35","hashOfConfig":"26"},{"size":934,"mtime":1619072715237,"results":"36","hashOfConfig":"26"},{"size":3288,"mtime":1619073413704,"results":"37","hashOfConfig":"26"},{"size":2705,"mtime":1625317016725,"results":"38","hashOfConfig":"23"},{"size":594,"mtime":1625315641039,"results":"39","hashOfConfig":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zd24t9",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"g3f744",{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1l44y1o",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\template\\src\\app.jsx",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\template\\src\\index.js",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\app.jsx",["82"],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\VideoList\\VideoList.jsx",["83"],"import React, { useEffect, useState } from 'react';\r\nimport VideoItem from '../VideoItem/VideoItem';\r\nimport styles from './VideoList.module.css';\r\n\r\nconst VideoList = ({videos, channels, display}) => {\r\n    const displayType = display === 'grid' ? styles.grid : styles.list;\r\n\r\n    const [videoList, setVideoList] = useState(videos);\r\n    useEffect(() => {\r\n      setVideoList(videos);\r\n    }, [videos]);\r\n\r\n    useEffect(() => {\r\n      if(display === 'grid') {\r\n        const newList = videoList.splice(0, 24);\r\n        console.log(\"splice\", newList);\r\n        setVideoList(newList);\r\n      }\r\n    },[display]);\r\n\r\n    // console.log(channels);\r\n    return (\r\n        <div className={`${styles.container} ${displayType}`}>\r\n            <ul>\r\n                {\r\n                  videoList.map((video, index) => {\r\n                        let channelLogo;\r\n                        channels.forEach(element => {\r\n                            if(element.id === video.snippet.channelId) {\r\n                                channelLogo = element.snippet.thumbnails.default.url;\r\n                            }\r\n                        });\r\n                        return (\r\n                            <VideoItem key={`${video.id}${index}`} video={video} channelLogo={channelLogo} display={display}/>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoList;",["84","85"],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\Search\\Search.jsx",[],["86","87"],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\index.js",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\service\\youtube.js",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\VideoItem\\VideoItem.jsx",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\SideMenu\\SideMenu.jsx",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\VideoDetail\\VideoDetail.jsx",["88","89","90","91","92","93"],"import React from 'react';\r\nimport Comments from '../Comments/Comments';\r\nimport styles from './VideoDetail.module.css';\r\n\r\nconst VideoDetail = ({video, channel, comments, commentsChannelLogos}) => {\r\n    // console.log(\"VideoDetail \",channel);\r\n    const getViewCount = (count) => {\r\n        const result = count.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n        return result;\r\n    };\r\n\r\n    const getPublishedTime = () => {\r\n        let writeDay = new Date(video.snippet.publishedAt);\r\n        let day = writeDay.getDate();\r\n        let month = (writeDay.getMonth()+1);\r\n        let year = writeDay.getFullYear();\r\n        let publishedTime = `${year}. ${month}. ${day}.`;\r\n\r\n        return publishedTime;\r\n    };\r\n\r\n    const getSubscriberCount = (count) => {\r\n        let result;\r\n\r\n        if(count.length <= 4) {\r\n            result = count / 1000 + \"천\";\r\n            if(count.length === 0) {\r\n                result = 0;\r\n            }else if(0 < count.length <=3) {\r\n                result = count;\r\n            }\r\n        }else if( 4 < count.length < 9) {\r\n            result = count / 10000 + \"만\";\r\n        }else if(count.length >= 9) {\r\n            console.log(\"억\")\r\n        }\r\n       return result;\r\n\r\n    };\r\n\r\n    const getLikeCount = (count) => {\r\n        let result;\r\n\r\n        if(count.length <= 4) {\r\n            if(count.length === 0) {\r\n                result = 0;\r\n            }else if(0 < count.length <=3) {\r\n                result = count;\r\n            }\r\n            result = parseFloat(count / 1000).toFixed(1) + \"천\";\r\n        }else if( 4 < count.length < 9) {\r\n            result = parseFloat(count / 10000).toFixed(0) + \"만\";\r\n        }else if(count.length >= 9) {\r\n            console.log(\"억\")\r\n        }\r\n       return result;\r\n\r\n    };\r\n\r\n    const getDescription = () => {\r\n        const description = video.snippet.description;\r\n        let urlRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n        return description.replace(urlRegex, (url) => {\r\n            return `<a href=${url}>${url}</a>`\r\n        })\r\n    };\r\n    \r\n    return(\r\n        <div className={styles.container}>\r\n            <div className={styles.iframe_wrap}>\r\n                <iframe src={`https://www.youtube.com/embed/${video.id}`} title=\"youtube video player\" type=\"text/html\" frameBorder=\"0\" allowFullScreen></iframe>\r\n            </div>\r\n            <p className={styles.title}>{video.snippet.title}</p>\r\n            <div className={styles.count_wrap}>\r\n                <div className={styles.count_left}>\r\n                    <span>조회수 {getViewCount(video.statistics.viewCount)}회</span>\r\n                    <span>{getPublishedTime()}</span>\r\n                </div>\r\n                <div className={styles.count_right}>\r\n                    <button className={styles.btn_like}><i className=\"fas fa-thumbs-up\"></i><span>{getLikeCount(video.statistics.likeCount)}</span></button>\r\n                    <button className={styles.btn_dislike}><i className=\"fas fa-thumbs-down\"></i><span>{getLikeCount(video.statistics.dislikeCount)}</span></button>\r\n                    <button className={styles.btn_share}><i className=\"fas fa-share\"></i><span>공유</span></button>\r\n                    <button className={styles.btn_save}><i className=\"far fa-plus-square\"></i><span>저장</span></button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.channel_container}>\r\n                <div className={styles.channel_wrap}>\r\n                    <a href=\"#\" className='channelLogo'>\r\n                        <img src={channel.snippet.thumbnails.default.url} alt=\"channel logo\"/>\r\n                    </a>\r\n                    <div className={styles.channel_info}>\r\n                        <a href=\"\" className={styles.channel_title}>\r\n                            {video.snippet.channelTitle}\r\n                        </a>\r\n                        {\r\n                            channel.statistics.hiddenSubscriberCount || (\r\n                                <span>구독자 {getSubscriberCount(channel.statistics.subscriberCount)}명</span>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <button>구독</button>\r\n                </div>\r\n\r\n                <div className={styles.description}  dangerouslySetInnerHTML={ {__html:getDescription()}}></div>\r\n            </div>\r\n\r\n            <div className={styles.comment_wrap}>\r\n                <p>댓글 {getViewCount(video.statistics.commentCount)}개</p>\r\n                <Comments comments={comments} commentsChannelLogos={commentsChannelLogos}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default VideoDetail;","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\Comments\\Comments.jsx",["94","95","96","97"],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\Main\\Main.jsx",["98","99","100","101"],"import React, {useEffect, useState} from 'react';\r\nimport SideMenu from \"../SideMenu/SideMenu\";\r\nimport VideoList from \"../VideoList/VideoList\";\r\nimport {infiniteScroll} from \"../../service/infiniteScroll\";\r\n\r\nconst Main = ({ youtube }) => {\r\n  const [videos, setVideos] = useState([]);\r\n  const [channels, setChannels] = useState([]);\r\n  const [channelIDList, setChannelIDList] = useState([]);\r\n  const [videoNextPageToken, setVideoNextPageToken] = useState('');\r\n\r\n  useEffect(() => {\r\n    getMostPopular();\r\n  }, [youtube]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", paging);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", paging);\r\n    };\r\n  }, [videoNextPageToken, videos]);\r\n\r\n  const paging = () => {\r\n    infiniteScroll(videoNextPageToken, getMostPopular);\r\n  };\r\n\r\n  const getMostPopular = (videoNextPageToken) => {\r\n    youtube.mostPopular(videoNextPageToken).then(result => {\r\n      setVideoNextPageToken(result.nextPageToken);\r\n      let newVideos = result.items;\r\n      let newChannelIdList = [];\r\n\r\n      newVideos.forEach(element => {\r\n        newChannelIdList.push(element.snippet.channelId);\r\n      });\r\n\r\n      let newVideoList = videos.concat();\r\n      newVideoList = [...newVideoList, ...newVideos];\r\n\r\n      youtube.getChannelList(newChannelIdList).then(newChannels =>{\r\n        let newChannelList = channels.concat();\r\n        newChannelList = [...newChannelList, ...newChannels];\r\n        setChannels(newChannelList);\r\n      });\r\n      setVideos(newVideoList);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SideMenu />\r\n      <VideoList videos={videos} channels={channels} display={'list'}/>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Main;","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\Root.js",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\Router.jsx",[],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\SelectedVideo\\SelectedVideo.jsx",["102","103"],"import React, {useEffect, useState} from 'react';\r\nimport VideoDetail from \"../VideoDetail/VideoDetail\";\r\nimport VideoList from \"../VideoList/VideoList\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport styles from './SelectedVideo.module.css';\r\nimport {infiniteScroll} from \"../../service/infiniteScroll\";\r\n\r\nconst SelectedVideo = ({youtube}) => {\r\n\r\n  const { videoId } = useParams();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [preVideoId, setPreVideoId] = useState('');\r\n  const [selectedVideo, setSelectedVideo] = useState([]);\r\n  const [selectedVideoChannel, setSelectedVideoChannel] = useState('');\r\n  const [comments, setComments] = useState([]);\r\n  const [commentsChannelLogos, setCommentsChannelLogos] = useState([]);\r\n\r\n  const [videoList, setVideoList] = useState([]);\r\n  const [channels, setChannels] = useState([]);\r\n  const [videoNextPageToken, setVideoNextPageToken] = useState('');\r\n\r\n  useEffect(() => {\r\n    getSelectedVideo();\r\n  }, [videoId]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", paging);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", paging);\r\n    };\r\n  }, [videoNextPageToken, videoList]);\r\n\r\n  const paging = () => {\r\n    infiniteScroll(videoNextPageToken, getVideoList);\r\n  };\r\n  const getSelectedVideo = () => {\r\n    let data = '';\r\n    let channelId = '';\r\n    let channelData = '';\r\n    youtube.getVideoList(videoId).then(video => {\r\n      data = video[0];\r\n      channelId = data.snippet.channelId;\r\n      setSelectedVideo(data);\r\n      youtube.getChannelList(channelId).then(channel => {\r\n        channelData = channel[0];\r\n        setSelectedVideoChannel(channelData);\r\n      });\r\n      youtube.getCommentList(videoId).then(comments => {\r\n        let channelIdList = [];\r\n        comments.forEach(element => {\r\n          channelIdList.push(element.snippet.topLevelComment.snippet.authorChannelId.value);\r\n        });\r\n        youtube.getChannelList(channelIdList).then(channels => setCommentsChannelLogos(channels));\r\n        setComments(comments);\r\n      });\r\n      setPreVideoId(videoId);\r\n      getVideoList();\r\n      window.scrollTo(0, 0);\r\n    });\r\n  };\r\n\r\n\r\n  const getVideoList = (videoNextPageToken) => {\r\n    youtube.mostPopular(videoNextPageToken).then(result => {\r\n      setVideoNextPageToken(result.nextPageToken);\r\n      let newVideos = result.items;\r\n      let newChannelIdList = [];\r\n      newVideos.forEach(element => {\r\n        newChannelIdList.push(element.snippet.channelId);\r\n      });\r\n      let newVideoList = preVideoId !== videoId ? [] : videoList.concat();\r\n      newVideoList = [...newVideoList, ...newVideos];\r\n\r\n      youtube.getChannelList(newChannelIdList).then(newChannels =>{\r\n        let newChannelList = channels.concat();\r\n        newChannelList = [...newChannelList, ...newChannels];\r\n        setChannels(newChannelList);\r\n        setIsLoading(true);\r\n      });\r\n      setVideoList(newVideoList);\r\n    });\r\n  };\r\n\r\n  return(\r\n    isLoading &&\r\n    <div className={styles.container}>\r\n      <VideoDetail video={selectedVideo} channel={selectedVideoChannel} comments={comments} commentsChannelLogos={commentsChannelLogos}/>\r\n      <VideoList display={'grid'} videos={videoList} channels={channels}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default SelectedVideo;","C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\components\\SearchVideoList\\SearchVideoList.jsx",["104"],"C:\\Users\\BOM\\Desktop\\projects\\react-basic\\youtube-mine\\src\\service\\infiniteScroll.js",[],{"ruleId":"105","severity":1,"message":"106","line":22,"column":10,"nodeType":"107","messageId":"108","endLine":22,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":19,"column":7,"nodeType":"111","endLine":19,"endColumn":16,"suggestions":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"113","replacedBy":"117"},{"ruleId":"115","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":29,"column":24,"nodeType":"121","messageId":"122","endLine":29,"endColumn":25},{"ruleId":"119","severity":1,"message":"120","line":29,"column":39,"nodeType":"121","messageId":"122","endLine":29,"endColumn":41},{"ruleId":"119","severity":1,"message":"120","line":47,"column":24,"nodeType":"121","messageId":"122","endLine":47,"endColumn":25},{"ruleId":"119","severity":1,"message":"120","line":47,"column":39,"nodeType":"121","messageId":"122","endLine":47,"endColumn":41},{"ruleId":"123","severity":1,"message":"124","line":89,"column":21,"nodeType":"125","endLine":89,"endColumn":57},{"ruleId":"123","severity":1,"message":"124","line":93,"column":25,"nodeType":"125","endLine":93,"endColumn":69},{"ruleId":"105","severity":1,"message":"126","line":54,"column":29,"nodeType":"107","messageId":"108","endLine":54,"endColumn":36},{"ruleId":"105","severity":1,"message":"127","line":55,"column":29,"nodeType":"107","messageId":"108","endLine":55,"endColumn":40},{"ruleId":"123","severity":1,"message":"124","line":60,"column":29,"nodeType":"125","endLine":60,"endColumn":73},{"ruleId":"123","severity":1,"message":"124","line":65,"column":37,"nodeType":"125","endLine":65,"endColumn":81},{"ruleId":"105","severity":1,"message":"128","line":9,"column":10,"nodeType":"107","messageId":"108","endLine":9,"endColumn":23},{"ruleId":"105","severity":1,"message":"129","line":9,"column":25,"nodeType":"107","messageId":"108","endLine":9,"endColumn":41},{"ruleId":"109","severity":1,"message":"130","line":14,"column":6,"nodeType":"111","endLine":14,"endColumn":15,"suggestions":"131"},{"ruleId":"109","severity":1,"message":"132","line":21,"column":6,"nodeType":"111","endLine":21,"endColumn":34,"suggestions":"133"},{"ruleId":"109","severity":1,"message":"134","line":25,"column":6,"nodeType":"111","endLine":25,"endColumn":15,"suggestions":"135"},{"ruleId":"109","severity":1,"message":"132","line":32,"column":6,"nodeType":"111","endLine":32,"endColumn":37,"suggestions":"136"},{"ruleId":"109","severity":1,"message":"132","line":20,"column":6,"nodeType":"111","endLine":20,"endColumn":53,"suggestions":"137"},"no-unused-vars","'searchNextPageToken' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'videoList'. Either include it or remove the dependency array.","ArrayExpression",["138"],"no-native-reassign",["139"],"no-negated-in-lhs",["140"],["139"],["140"],"no-mixed-operators","Unexpected mix of '<' and '<='.","BinaryExpression","unexpectedMixedOperator","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'channel' is assigned a value but never used.","'channelLogo' is assigned a value but never used.","'channelIDList' is assigned a value but never used.","'setChannelIDList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getMostPopular'. Either include it or remove the dependency array.",["141"],"React Hook useEffect has a missing dependency: 'paging'. Either include it or remove the dependency array.",["142"],"React Hook useEffect has a missing dependency: 'getSelectedVideo'. Either include it or remove the dependency array.",["143"],["144"],["145"],{"desc":"146","fix":"147"},"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [display, videoList]",{"range":"158","text":"159"},"Update the dependencies array to be: [getMostPopular, youtube]",{"range":"160","text":"161"},"Update the dependencies array to be: [paging, videoNextPageToken, videos]",{"range":"162","text":"163"},"Update the dependencies array to be: [getSelectedVideo, videoId]",{"range":"164","text":"165"},"Update the dependencies array to be: [videoNextPageToken, videoList, paging]",{"range":"166","text":"167"},"Update the dependencies array to be: [searchNextPageToken, preQuery, searchedVideos, paging]",{"range":"168","text":"169"},[602,611],"[display, videoList]",[516,525],"[getMostPopular, youtube]",[686,714],"[paging, videoNextPageToken, videos]",[979,988],"[getSelectedVideo, videoId]",[1149,1180],"[videoNextPageToken, videoList, paging]",[758,805],"[searchNextPageToken, preQuery, searchedVideos, paging]"]